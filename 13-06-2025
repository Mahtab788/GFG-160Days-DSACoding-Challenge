#.Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.
Each hour, Koko can choose one pile and eat up to s bananas from it.
If the pile has at least s bananas, she eats exactly s bananas.
If the pile has fewer than s bananas, she eats the entire pile in that hour.
Koko can only eat from one pile per hour.
Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.


class Solution {
    public int kokoEat(int[] arr, int k) {
        // code here
        int left = 1;
        int right = getMax(arr);
        int result = right;
        
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(canFinish(arr, k, mid)){
                result = mid;
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        
        return result;
    }
    
    private boolean canFinish(int[] arr, int k, int speed){
        int hours = 0;
        for(int pile : arr){
            hours += (pile + speed - 1) / speed;
        }
        
        return hours <= k;
    }
    
    private int getMax(int[] arr){
        int max = 0;
        for(int num : arr){
            max = Math.max(max, num);
        }
        
        return max;
    }
}
