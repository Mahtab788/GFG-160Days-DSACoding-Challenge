#.Given the head of a linked list that may contain a loop.  A loop means that the last node of the linked list is connected back to a node in the same list. The task is to remove the loop from the linked list (if it exists).

Custom Input format:

A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.

The generated output will be true if there is no loop in list and other nodes in the list remain unchanged, otherwise, false.

class Solution {
    public static void removeLoop(Node head) {
        if (head == null || head.next == null) return;

        Node slow = head, fast = head;
        Node prev = null; // To store the last node in cycle

        // Step 1: Detect cycle using Floydâ€™s Cycle Detection Algorithm
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) { // Cycle detected
                break;
            }
        }

        // If no cycle is found, return
        if (fast == null || fast.next == null) return;

        // Step 2: Find the start of the loop
        slow = head;
        if (slow == fast) { // Special case: loop starts at head
            while (fast.next != slow) {
                fast = fast.next;
            }
        } else { // Normal case: Move both pointers until they meet
            while (slow.next != fast.next) {
                slow = slow.next;
                fast = fast.next;
            }
        }

        // Step 3: Remove the loop
        fast.next = null;
    }
}
