#.Given the head of two singly linked lists num1 and num2 representing two non-negative integers. The task is to return the head of the linked list representing the sum of these two numbers.

For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

class Solution {
    static Node addTwoLists(Node num1, Node num2) {
        // Step 1: Reverse both lists to facilitate addition
        num1 = reverseList(num1);
        num2 = reverseList(num2);

        // Step 2: Add the numbers
        Node result = addReversedLists(num1, num2);

        // Step 3: Reverse and remove leading zeros
        result = reverseList(result);
        return removeLeadingZeros(result);
    }

    // Reverse a linked list
    static Node reverseList(Node head) {
        Node prev = null, curr = head, next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    // Add two reversed lists digit by digit
    static Node addReversedLists(Node num1, Node num2) {
        Node dummy = new Node(0);
        Node temp = dummy;
        int carry = 0;

        while (num1 != null || num2 != null || carry > 0) {
            int sum = carry;

            if (num1 != null) {
                sum += num1.data;
                num1 = num1.next;
            }

            if (num2 != null) {
                sum += num2.data;
                num2 = num2.next;
            }

            carry = sum / 10;
            temp.next = new Node(sum % 10);
            temp = temp.next;
        }
        return dummy.next;
    }

    // Remove leading zeros from the final linked list
    static Node removeLeadingZeros(Node head) {
        while (head != null && head.data == 0) {
            head = head.next;
        }
        return (head == null) ? new Node(0) : head;
    }
}
