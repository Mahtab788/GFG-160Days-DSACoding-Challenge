#.Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.

Note: The output is written in postorder traversal.

class Solution {

    // Recursive function to build the binary tree
    private static Node buildTreeRecursive(int inorder[], int preorder[], int inStart, int inEnd, HashMap<Integer, Integer> inorderMap, int[] preorderIndex) {
        // Base case
        if (inStart > inEnd) {
            return null;
        }

        // Get the current root from preorder
        int rootValue = preorder[preorderIndex[0]++];
        Node root = new Node(rootValue);

        // Find the index of root in inorder array
        int inIndex = inorderMap.get(rootValue);

        // Recursively build the left and right subtrees
        root.left = buildTreeRecursive(inorder, preorder, inStart, inIndex - 1, inorderMap, preorderIndex);
        root.right = buildTreeRecursive(inorder, preorder, inIndex + 1, inEnd, inorderMap, preorderIndex);

        return root;
    }

    // Main function to build the binary tree
    public static Node buildTree(int inorder[], int preorder[]) {
        // Step 1: Create a map to store the index of each element in inorder for faster lookups
        HashMap<Integer, Integer> inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        // Step 2: Initialize preorderIndex to keep track of the current position in preorder array
        int[] preorderIndex = {0};  // This is an array because it needs to be passed by reference

        // Step 3: Call the recursive function to construct the tree
        return buildTreeRecursive(inorder, preorder, 0, inorder.length - 1, inorderMap, preorderIndex);
    }

    // Postorder traversal to print the tree
    public static void postOrder(Node root) {
        if (root == null) {
            return;
        }

        // Traverse left subtree, right subtree, and then root
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data + " ");
    }

    public static void main(String[] args) {
        // Test case 1
        int inorder1[] = {1, 6, 8, 7};
        int preorder1[] = {1, 6, 7, 8};
        Node root1 = buildTree(inorder1, preorder1);
        postOrder(root1); // Expected output: 8 7 6 1

        System.out.println();

        // Test case 2
        int inorder2[] = {3, 1, 4, 0, 2, 5};
        int preorder2[] = {0, 1, 3, 4, 2, 5};
        Node root2 = buildTree(inorder2, preorder2);
        postOrder(root2); // Expected output: 3 4 1 5 2 0

        System.out.println();

        // Test case 3
        int inorder3[] = {2, 5, 4, 1, 3};
        int preorder3[] = {1, 4, 5, 2, 3};
        Node root3 = buildTree(inorder3, preorder3);
        postOrder(root3); // Expected output: 2 5 4 3 1
    }
}
