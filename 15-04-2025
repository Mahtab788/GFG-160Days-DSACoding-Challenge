#.Given an weighted graph with V vertices numbered from 0 to V-1 and E edges, represented by a 2d array edges[][], where edges[i] = [u, v, w] represents a direct edge from node u to v having w edge weight. You are also given a source vertex src.

Your task is to compute the shortest distances from the source to all other vertices. If a vertex is unreachable from the source, its distance should be marked as 108. Additionally, if the graph contains 
a negative weight cycle, return [-1] to indicate that shortest paths cannot be reliably computed.

class Solution {
    static int[] bellmanFord(int V, int[][] edges, int src) {

        //storing shortest distance
        int [] dist = new int[V];
        Arrays.fill(dist, (int)10e7);
        dist[src]=0;
        
        for(int count=1; count<=V-1; count++){
            for(int []t: edges){
                int u= t[0];
                int v= t[1];
                int wt= t[2];
                
                if(dist[u]!=(int)10e7 && dist[u]+wt<dist[v]){
                    dist[v] =dist[u]+wt;
                }
            }
        }
        int [] arr= {-1};
        //detecting negative cycle
        for(int []t: edges){
                int u= t[0];
                int v= t[1];
                int wt= t[2];
                
                if(dist[u]!=(int)10e7 && dist[u]+wt<dist[v])
                
                return arr;
        }

return dist;
    }
    }
