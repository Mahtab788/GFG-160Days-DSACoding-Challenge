#.You are given an array coins[], where each element represents a coin of a different denomination, and a target value sum. You have an unlimited supply of each coin type {coins1, coins2, ..., coinsm}.

Your task is to determine the minimum number of coins needed to obtain the target sum. If it is not possible to form the sum using the given coins, return -1.

class Solution {
    public int minCoins(int coins[], int sum) {
        int n = coins.length;
        int[] dp = new int[sum + 1];

        // Initialize dp array with a large value (infinity equivalent)
        Arrays.fill(dp, sum + 1);
        dp[0] = 0; // Base case: 0 coins are needed for sum = 0

        // Bottom-up DP approach
        for (int i = 1; i <= sum; i++) {
            for (int coin : coins) {
                if (i >= coin) {
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }

        return dp[sum] == sum + 1 ? -1 : dp[sum]; // Return -1 if sum cannot be formed
    }
  }
