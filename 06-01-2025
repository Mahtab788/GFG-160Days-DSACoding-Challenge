#.Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

import java.util.*;

class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
        Arrays.sort(arr);  // Sort the array
        int left = 0, right = arr.length - 1;
        int minDiff = Integer.MAX_VALUE;
        List<Integer> result = new ArrayList<>();

        while (left < right) {
            int sum = arr[left] + arr[right];
            int diff = Math.abs(sum - target);

            if (diff < minDiff) {
                minDiff = diff;
                result = Arrays.asList(arr[left], arr[right]);
            } else if (diff == minDiff && (arr[right] - arr[left]) > (result.get(1) - result.get(0))) {
                result = Arrays.asList(arr[left], arr[right]);
            }

            if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
        return result;
    }
}
