#.Given an array arr of 0s and 1s. Find and return the length of the longest subarray with equal number of 0s and 1s.


class Solution {
    public int maxLen(int[] arr) {
        // Replace 0 with -1
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i] = -1;
            }
        }

        // HashMap to store first occurrence of prefixSum
        HashMap<Integer, Integer> map = new HashMap<>();
        int prefixSum = 0;
        int maxLength = 0;

        for (int i = 0; i < arr.length; i++) {
            prefixSum += arr[i];

            // If prefixSum is 0, update maxLength
            if (prefixSum == 0) {
                maxLength = i + 1;
            }

            // If prefixSum exists in the map, calculate subarray length
            if (map.containsKey(prefixSum)) {
                maxLength = Math.max(maxLength, i - map.get(prefixSum));
            } else {
                // Store the first occurrence of the prefixSum
                map.put(prefixSum, i);
            }
        }

        return maxLength;
    }
}
