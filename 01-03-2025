#.Given an encoded string s, the task is to decode it. The encoding rule is :

k[encodedString], where the encodedString inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
Note: The test cases are generated so that the length of the output string will never exceed 105 .

class Solution {
    static String decodeString(String s) {
        Stack<Integer> countStack = new Stack<>();
        Stack<StringBuilder> stringStack = new Stack<>();
        StringBuilder currentStr = new StringBuilder();
        int k = 0; // Store the current repeat count

        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                k = k * 10 + (c - '0'); // Handle multi-digit numbers
            } else if (c == '[') {
                countStack.push(k); // Push repeat count
                stringStack.push(currentStr); // Push current string
                currentStr = new StringBuilder(); // Reset for inner string
                k = 0; // Reset count
            } else if (c == ']') {
                int repeatTimes = countStack.pop();
                StringBuilder decodedString = stringStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    decodedString.append(currentStr);
                }
                currentStr = decodedString; // Update the result
            } else {
                currentStr.append(c); // Append normal characters
            }
        }
        return currentStr.toString();
    }
}
