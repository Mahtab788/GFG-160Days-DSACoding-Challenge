#.You are given the head of a singly linked list. Your task is to determine if the linked list contains a loop. 
A loop exists in a linked list if the next pointer of the last node points to any other node in the list (including itself), rather than being null.

Custom Input format:
A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. 
If pos = 0, it means the last node points to null, indicating there is no loop.

class Solution {
    // Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head) {
        if (head == null || head.next == null) {
            return false; // Empty list or a single node cannot have a loop.
        }

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next; // Move slow pointer by one step.
            fast = fast.next.next; // Move fast pointer by two steps.

            if (slow == fast) {
                return true; // Loop detected.
            }
        }

        return false; // No loop found.
    }
}
