#.Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

         class Solution {
    static boolean isBalanced(String s) {
        Stack<Character> stack = new Stack<>();

        for (char ch : s.toCharArray()) {
            // Push opening brackets onto the stack
            if (ch == '(' || ch == '{' || ch == '[') {
                stack.push(ch);
            } else {
                // If stack is empty when a closing bracket is found => invalid
                if (stack.isEmpty()) return false;

                char top = stack.pop();
                // Check if the popped bracket matches the closing bracket
                if ((ch == ')' && top != '(') ||
                    (ch == '}' && top != '{') ||
                    (ch == ']' && top != '[')) {
                    return false;  // Mismatched bracket
                }
            }
        }

        // âœ… If the stack is empty, all brackets matched correctly
        return stack.isEmpty();  // <-- Here we return true if balanced
    }
