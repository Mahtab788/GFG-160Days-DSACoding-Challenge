#.ou are given a set of activities, each with a start time and a finish time, represented by the arrays start[] and finish[], respectively. 
A single person can perform only one activity at a time, meaning no two activities can overlap. 
Your task is to determine the maximum number of activities that a person can complete in a day.


class Solution {
    public int activitySelection(int[] start, int[] finish) {
        int n = start.length;
        int[][] activities = new int[n][2];

        // Store start and finish times together
        for (int i = 0; i < n; i++) {
            activities[i][0] = start[i];  // Start time
            activities[i][1] = finish[i]; // Finish time
        }

        // Sort activities by finish time
        Arrays.sort(activities, Comparator.comparingInt(a -> a[1]));

        int count = 1; // First activity is always selected
        int lastFinishTime = activities[0][1];

        // Iterate over remaining activities
        for (int i = 1; i < n; i++) {
            if (activities[i][0] >= lastFinishTime) {
                count++;
                lastFinishTime = activities[i][1];
            }
        }
        return count;
    }
}
