#Given an array arr[] that contains positive and negative integers (may contain 0 as well). 
Find the maximum product that we can get in a subarray of arr.

Note: It is guaranteed that the output fits in a 32-bit integer.

class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        int n = arr.length;

        // Initialize variables to track the maximum and minimum products so far
        int maxProduct = arr[0];
        int currMax = arr[0];
        int currMin = arr[0];

        // Iterate through the array
        for (int i = 1; i < n; i++) {
            if (arr[i] < 0) {
                // Swap currMax and currMin when encountering a negative number
                int temp = currMax;
                currMax = currMin;
                currMin = temp;
            }

            // Update currMax and currMin
            currMax = Math.max(arr[i], currMax * arr[i]);
            currMin = Math.min(arr[i], currMin * arr[i]);

            // Update the global maximum product
            maxProduct = Math.max(maxProduct, currMax);
        }

        return maxProduct;
    }
}
