#.Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. 
If there is no subarray with sum equal to k, return 0.


class Solution {
    public int longestSubarray(int[] arr, int k) {
        // HashMap to store cumulative sum and its earliest index
        HashMap<Integer, Integer> sumIndexMap = new HashMap<>();
        int maxLength = 0;
        int currentSum = 0;

        for (int i = 0; i < arr.length; i++) {
            currentSum += arr[i];

            // Check if currentSum equals k
            if (currentSum == k) {
                maxLength = i + 1;
            }

            // Check if (currentSum - k) exists in the map
            if (sumIndexMap.containsKey(currentSum - k)) {
                maxLength = Math.max(maxLength, i - sumIndexMap.get(currentSum - k));
            }

            // Add currentSum to the map if it's not already present
            if (!sumIndexMap.containsKey(currentSum)) {
                sumIndexMap.put(currentSum, i);
            }
        }

        return maxLength;
    }
}
