#.The n-queens puzzle is the problem of placing n queens on a (n Ã— n) chessboard such that no two queens can attack each other. 
Note that two queens attack each other if they are placed on the same row, the same column, or the same diagonal.

Given an integer n, find all distinct solutions to the n-queens puzzle.
You can return your answer in any order but each solution should represent a distinct board configuration of the queen placements, where the solutions are represented as permutations of [1, 2, 3, ..., n]. 
In this representation, the number in the ith position denotes the row in which the queen is placed in the ith column.
For eg. below figure represents a chessboard [3 1 4 2].

class Solution {
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int[] board = new int[n]; // board[i] stores the row index where the queen is placed in column i
        HashSet<Integer> cols = new HashSet<>();
        HashSet<Integer> diag1 = new HashSet<>(); // row - col
        HashSet<Integer> diag2 = new HashSet<>(); // row + col

        solve(0, n, board, cols, diag1, diag2, result);
        return result;
    }

    private void solve(int col, int n, int[] board, HashSet<Integer> cols, 
                       HashSet<Integer> diag1, HashSet<Integer> diag2, 
                       ArrayList<ArrayList<Integer>> result) {
        if (col == n) {
            // Convert board to the required format
            ArrayList<Integer> solution = new ArrayList<>();
            for (int row : board) {
                solution.add(row + 1); // Convert to 1-based index
            }
            result.add(solution);
            return;
        }

        for (int row = 0; row < n; row++) {
            if (cols.contains(row) || diag1.contains(row - col) || diag2.contains(row + col)) {
                continue; // Skip invalid placements
            }

            // Place the queen
            board[col] = row;
            cols.add(row);
            diag1.add(row - col);
            diag2.add(row + col);

            // Recur to the next column
            solve(col + 1, n, board, cols, diag1, diag2, result);

            // Backtrack and remove the queen
            cols.remove(row);
            diag1.remove(row - col);
            diag2.remove(row + col);
        }
    }
}
