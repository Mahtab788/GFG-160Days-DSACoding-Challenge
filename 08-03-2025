#.Given a string s, your task is to find the longest palindromic substring within s.

A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.

class Solution {
    static String longestPalindrome(String s) {
        int start = 0, maxLength = 0;
        int n = s.length();

        for (int i = 0; i < n; i++) {
            // Odd length palindrome
            int len1 = expandAroundCenter(s, i, i);

            // Even length palindrome
            int len2 = expandAroundCenter(s, i, i + 1);

            // Find maximum length palindrome
            int len = Math.max(len1, len2);

            // Update max length and start index
            if (len > maxLength) {
                maxLength = len;
                start = i - (len - 1) / 2;
            }
        }
        return s.substring(start, start + maxLength);
    }

    static int expandAroundCenter(String s, int left, int right) {
        // Expand as long as it is palindrome
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // Return length of palindrome
        return right - left - 1;
    }
}
