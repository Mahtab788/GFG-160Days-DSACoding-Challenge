#.Given a strictly sorted 2D matrix mat[][] of size n x m and a number x. Find whether the number x is present in the matrix or not.
Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and the first element of the ith row (i!=0) is greater than the last element of the (i-1)th row.

class Solution {
    // Function to search a given number in a strictly sorted 2D matrix.
    public boolean searchMatrix(int[][] mat, int x) {
        int n = mat.length; // Number of rows
        int m = mat[0].length; // Number of columns
        
        int left = 0, right = n * m - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            // Convert mid to 2D indices
            int midElement = mat[mid / m][mid % m];
            
            if (midElement == x) {
                return true; // Found the element
            } else if (midElement < x) {
                left = mid + 1; // Search the right half
            } else {
                right = mid - 1; // Search the left half
            }
        }
        
        return false; // Element not found
    }
}
