#.Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().



class Solution {
    public static ArrayList<Integer> maxOfMins(int[] arr) {
        int n = arr.length;
        int[] left = new int[n];  // Stores left boundaries
        int[] right = new int[n]; // Stores right boundaries
        int[] res = new int[n];   // Stores the final result

        Stack<Integer> stack = new Stack<>();

        // Compute previous smaller elements (left boundary)
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        // Clear stack for next computation
        stack.clear();

        // Compute next smaller elements (right boundary)
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }

        // Fill res[] using derived window sizes
        for (int i = 0; i < n; i++) {
            int windowSize = right[i] - left[i] - 1;
            res[windowSize - 1] = Math.max(res[windowSize - 1], arr[i]);
        }

        // Propagate values to maintain decreasing order
        for (int i = n - 2; i >= 0; i--) {
            res[i] = Math.max(res[i], res[i + 1]);
        }

        // Convert to ArrayList and return
        ArrayList<Integer> result = new ArrayList<>();
        for (int val : res) {
            result.add(val);
        }
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {10, 20, 30, 50, 10, 70, 30};
        System.out.println(maxOfMins(arr)); // Output: [70, 30, 20, 10, 10, 10, 10]
    }
}
