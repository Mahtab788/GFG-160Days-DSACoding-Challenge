#.Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().


class Solution {
    public boolean wordBreak(String s, String[] dictionary) {
        // Convert the dictionary array to a HashSet for O(1) lookups
        HashSet<String> wordSet = new HashSet<>();
        int maxWordLength = 0;
        
        // Store all words in the dictionary and find the maximum word length
        for (String word : dictionary) {
            wordSet.add(word);
            maxWordLength = Math.max(maxWordLength, word.length());
        }

        // DP array where dp[i] is true if s[0...i-1] can be formed
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        
        // Base case: empty string can always be formed
        dp[0] = true;

        // Iterate through each position in the string s
        for (int i = 1; i <= n; i++) {
            // Check only up to the maximum word length to avoid unnecessary checks
            for (int j = Math.max(0, i - maxWordLength); j < i; j++) {
                if (dp[j] && wordSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;  // Once we find a valid word, no need to check further
                }
            }
        }

        // Return whether the entire string can be formed
        return dp[n];
    }
}
