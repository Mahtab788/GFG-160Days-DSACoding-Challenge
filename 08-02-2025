#.Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 

Left Boundary: This includes all the nodes on the path from the root to the leftmost leaf node. You must prefer the left child over the right child when traversing. Do not include leaf nodes in this section.

Leaf Nodes: All leaf nodes, in left-to-right order, that are not part of the left or right boundary.

Reverse Right Boundary: This includes all the nodes on the path from the rightmost leaf node to the root, traversed in reverse order. You must prefer the right child over the left child when traversing. Do not include the root in this section if it was already included in the left boundary.

Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary. 


class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        ArrayList<Integer> result = new ArrayList<>();
        if (node == null) return result;

        // Add root (only if it's not a leaf)
        if (!isLeaf(node)) result.add(node.data);

        // Get left boundary (excluding leaf nodes)
        addLeftBoundary(node.left, result);

        // Get leaf nodes (both left & right subtree)
        addLeaves(node, result);

        // Get right boundary (excluding leaf nodes) in reverse order
        addRightBoundary(node.right, result);

        return result;
    }

    // Helper function to check if a node is a leaf
    private boolean isLeaf(Node node) {
        return node != null && node.left == null && node.right == null;
    }

    // Add left boundary (excluding leaf nodes)
    private void addLeftBoundary(Node node, ArrayList<Integer> result) {
        while (node != null) {
            if (!isLeaf(node)) result.add(node.data);
            node = (node.left != null) ? node.left : node.right;
        }
    }

    // Add all leaf nodes (inorder traversal)
    private void addLeaves(Node node, ArrayList<Integer> result) {
        if (node == null) return;
        if (isLeaf(node)) {
            result.add(node.data);
            return;
        }
        addLeaves(node.left, result);
        addLeaves(node.right, result);
    }

    // Add right boundary (excluding leaf nodes) in reverse order
    private void addRightBoundary(Node node, ArrayList<Integer> result) {
        Stack<Integer> stack = new Stack<>();
        while (node != null) {
            if (!isLeaf(node)) stack.push(node.data);
            node = (node.right != null) ? node.right : node.left;
        }
        while (!stack.isEmpty()) result.add(stack.pop()); // Reverse order
    }
}
