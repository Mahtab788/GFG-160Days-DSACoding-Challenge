#.Given a string s consisting of lowercase English letters, for every character whose first and last occurrences are at different positions, 
calculate the sum of ASCII values of characters strictly between its first and last occurrence.
Return all such non-zero sums (order does not matter).

class Solution {
    public ArrayList<Integer> asciirange(String s) {
        // code here
        ArrayList<Integer> ans = new ArrayList<Integer>();
        Set<Character> set = new HashSet<>();
        int[] arr = new int[s.length()];
        arr[0] = s.charAt(0);
        for(int i=1;i<s.length();i++){
            char ch = s.charAt(i);
            arr[i]=arr[i-1]+ch;
        }
        for(int i=1;i<s.length();i++){
            char ch = s.charAt(i);
            if(!set.contains(ch)){
               int in =s.indexOf(ch);
               int in2 = s.lastIndexOf(ch);
               if(in!=in2){
                  // System.out.println(ch + " " + in + in2);
                   int val = helper(in, in2, arr, ch);
                   if(val!=0)
                   ans.add(val);
               }
            }
            set.add(ch);
        }
        
        return ans;
        
    }
    int helper(int st, int end, int[] arr, char ch){
        int ans = 0;
        ans+=arr[end-1];
        ans-=arr[st];
        return ans;
    }
}
