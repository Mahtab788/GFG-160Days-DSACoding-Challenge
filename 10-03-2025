#.Given two strings s1 and s2. Return the minimum number of operations required to convert s1 to s2.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.

class Solution {
    public int editDistance(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
        
        int[][] dp = new int[m + 1][n + 1];

        // Fill the dp table
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                // If s1 is empty, insert all characters of s2
                if (i == 0) {
                    dp[i][j] = j;
                }
                // If s2 is empty, remove all characters of s1
                else if (j == 0) {
                    dp[i][j] = i;
                }
                // If last characters are the same, no operation needed
                else if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                // If last characters are different, consider all operations
                else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j], // Remove
                                    Math.min(dp[i][j - 1], // Insert
                                             dp[i - 1][j - 1])); // Replace
                }
            }
        }
        
        return dp[m][n];
    }
}
