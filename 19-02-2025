#.Given an array arr[] of n sorted linked lists of different sizes. 
The task is to merge them in such a way that after merging they will be a single sorted linked list, then return the head of the merged linked list.

class Solution {
    // Function to merge K sorted linked lists.
    Node mergeKLists(List<Node> arr) {
        // Min-heap based on node data
        PriorityQueue<Node> minHeap = new PriorityQueue<>(Comparator.comparingInt(n -> n.data));

        // Add the head of each list to the minHeap
        for (Node head : arr) {
            if (head != null) {
                minHeap.offer(head);
            }
        }

        // Dummy node to help build the merged list
        Node dummy = new Node(0);
        Node tail = dummy;

        // Extract the smallest node and add the next node from the same list
        while (!minHeap.isEmpty()) {
            Node current = minHeap.poll();
            tail.next = current;
            tail = tail.next;

            if (current.next != null) {
                minHeap.offer(current.next);
            }
        }

        return dummy.next; // Head of the merged linked list
    }
}
