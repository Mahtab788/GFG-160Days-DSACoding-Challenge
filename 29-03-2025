#.You are given two arrays: deadline[], and profit[], which represent a set of jobs, where each job is associated with a deadline, and a profit. 
Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. You will earn the profit associated with a job only if it is completed by its deadline.

Your task is to find:

The maximum number of jobs that can be completed within their deadlines.
The total maximum profit earned by completing those jobs.


class Solution {
    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {
        int n = deadline.length;
        Job[] jobs = new Job[n];

        // Store job details
        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(deadline[i], profit[i]);
        }

        // Sort jobs by profit in descending order
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);

        // Find the maximum deadline
        int maxDeadline = 0;
        for (Job job : jobs) {
            maxDeadline = Math.max(maxDeadline, job.deadline);
        }

        // Slot array to track free slots
        int[] slot = new int[maxDeadline + 1]; // Using index 1-based
        Arrays.fill(slot, -1); // -1 means free slot

        int jobCount = 0, totalProfit = 0;

        // Allocate jobs
        for (Job job : jobs) {
            // Find latest available slot (from job.deadline to 1)
            for (int j = job.deadline; j > 0; j--) {
                if (slot[j] == -1) { // If slot is free
                    slot[j] = job.profit;
                    jobCount++;
                    totalProfit += job.profit;
                    break;
                }
            }
        }

        // Return results
        return new ArrayList<>(Arrays.asList(jobCount, totalProfit));
    }

    // Job class to store deadline and profit
    static class Job {
        int deadline, profit;
        Job(int d, int p) {
            this.deadline = d;
            this.profit = p;
        }
    }
}
