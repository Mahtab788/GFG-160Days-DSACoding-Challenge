#.You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

If arr[i] = 3, you can jump to index i + 1, i + 2, or i + 3 from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

class Solution {
    static int minJumps(int[] arr) {
        int n = arr.length;
        if (n <= 1) return 0; // Already at the last index
        if (arr[0] == 0) return -1; // Cannot move forward
        
        int jumps = 1;  // At least one jump is needed
        int maxReach = arr[0]; // Maximum index we can reach
        int steps = arr[0]; // Steps we can still take

        for (int i = 1; i < n; i++) {
            if (i == n - 1) return jumps; // Reached last index
            
            maxReach = Math.max(maxReach, i + arr[i]); // Update max reachable index
            steps--; // Use a step
            
            if (steps == 0) { // If no steps left
                jumps++; // Need another jump
                if (i >= maxReach) return -1; // Can't move further
                steps = maxReach - i; // Refill steps
            }
        }
        return -1; // If we never reach the last index
    }
}
