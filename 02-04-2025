#.Given a connected undirected graph containing V vertices, represented by a 2-d adjacency list adj[][],
where each adj[i] represents the list of vertices connected to vertex i. 
Perform a Breadth First Search (BFS) traversal starting from vertex 0, visiting vertices from left to right according to the given adjacency list, 
and return a list containing the BFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

class Solution {
    // Function to return Breadth First Search Traversal of given graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
        if(adj==null||adj.size()==0)
        return res;
        
        int n = adj.size();
        boolean[] vis = new boolean[n];
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            bfsUtils(adj,i,vis,res);
        }
        return res;
    }
    private void bfsUtils(ArrayList<ArrayList<Integer>> adj,int source,
    boolean[] vis,ArrayList<Integer> res)
    {
        ArrayDeque<Integer> q = new ArrayDeque<>();
        q.offer(source);
        vis[source] = true;
        
        while(!q.isEmpty())
        {
            Integer currNode = q.poll();
            res.add(currNode);
            
            for(int neighbour:adj.get(currNode))
            {
                if(!vis[neighbour])
                {
                    q.offer(neighbour);
                    vis[neighbour] = true;
                }
            }
        }
    }
}
