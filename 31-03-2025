#.Given a string s of lowercase English alphabets, your task is to return the maximum number of substrings formed, 
after possible partitions (probably zero) of s such that no two substrings have a common character.



class Solution {
    public int maxPartitions(String s) {
        int n = s.length();
        Map<Character, Integer> lastIndex = new HashMap<>();

        // Store the last occurrence of each character
        for (int i = 0; i < n; i++) {
            lastIndex.put(s.charAt(i), i);
        }

        int partitions = 0, maxEnd = 0;
        
        // Traverse the string and determine partitions
        for (int i = 0; i < n; i++) {
            maxEnd = Math.max(maxEnd, lastIndex.get(s.charAt(i)));
            if (i == maxEnd) { // Partition point found
                partitions++;
            }
        }
        
        return partitions;
    }
}
